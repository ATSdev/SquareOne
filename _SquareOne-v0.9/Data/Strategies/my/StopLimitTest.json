{
  "$type": "Sq1.Core.StrategyBase.Strategy, Sq1.Core",
  "Guid": "3a7b6354-aa56-4391-b086-d9abd05225b3",
  "Name": "StopLimitTest",
  "ScriptSourceCode": "using System;\r\nusing System.Diagnostics;\r\nusing System.Collections.Generic;\r\n\r\nusing Sq1.Core.DataTypes;\r\nusing Sq1.Core.Execution;\r\nusing Sq1.Core.StrategyBase;\r\n\r\nnamespace Sq1.Strategies.Worldexplorer {\r\n\tpublic class StopLimitTest : Script {\r\n\t\tpublic override void InitializeBacktest() {\r\n\t\t\t//this.PadBars(0);\r\n\t\t}\r\n\t\tpublic override void OnNewQuoteOfStreamingBarCallback(Quote quoteNewArrived) {\r\n\t\t\tthis.placePrototypeOncePositionClosed(quoteNewArrived.ParentStreamingBar);\r\n\t\t}\r\n\t\tpublic override void OnBarStaticLastFormedWhileStreamingBarWithOneQuoteAlreadyAppendedCallback(Bar barNewStaticArrived) {\r\n\t\t\t//this.placePrototypeOncePositionClosed(barNewStaticArrived);\r\n\t\t}\r\n\t\tprivate void placePrototypeOncePositionClosed(Bar bar) {\r\n\t\t\tbool isBacktesting = this.Executor.Backtester.IsBacktestingNow;\r\n\t\t\t//WHATS_THE_DIFFERENCE? if (isBacktesting) return;\r\n\r\n\t\t\tif (bar.ParentBarsIndex == 138) {\r\n\t\t\t\t//Debugger.Break();\r\n\t\t\t}\r\n\r\n\t\t\tif (base.HasPositionsOpenNow) return;\r\n\r\n\t\t\tif (base.HasAlertsPending) {\r\n\t\t\t\t// only kill pending entries, but leave activated SL & TP for an open position UNTOUCHED !!!!\r\n\t\t\t\tExecutionDataSnapshot snap = this.Executor.ExecutionDataSnapshot;\r\n\t\t\t\tList<Alert> pendings = snap.AlertsPendingSafeCopy;\r\n\t\t\t\tif (pendings.Count > 0) {\r\n\t\t\t\t\tstring msg = pendings.Count + \" last AlertsPending[\" + snap.AlertsPending[pendings.Count - 1] + \"]\";\r\n\t\t\t\t\t//PrintDebug(msg);\r\n\t\t\t\t\tforeach (Alert alert in pendings) {\r\n\t\t\t\t\t\tint wasntFilledDuringPastNbars = bar.ParentBarsIndex - alert.PlacedBarIndex;\r\n\t\t\t\t\t\tif (wasntFilledDuringPastNbars >= 30) {\r\n\t\t\t\t\t\t\t//if (alert.PositionAffected.Prototype != null) {}\r\n\t\t\t\t\t\t\t//base.Executor.CallbackAlertKilledInvokeScript(alert);\r\n\t\t\t\t\t\t\tbase.AlertKillPending(alert);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tdouble protoPlacementOffsetPct = 1;\r\n\t\t\tdouble TPpct = 2;\r\n\t\t\tdouble SLpct = -1;\r\n\t\t\tdouble SLApct = -0.8;\r\n\r\n\t\t\tdouble protoPlacement = bar.Close + bar.Close * protoPlacementOffsetPct / 100;\r\n\t\t\tdouble TP = bar.Close * TPpct / 100;\r\n\t\t\tdouble SL = bar.Close * SLpct / 100;\r\n\t\t\tdouble SLactivation = bar.Close * SLApct / 100;\r\n\t\t\tSLactivation = 0;\t// when SLactivation == 0 Prototype generates Stop alert instead of StopLoss\r\n\r\n\t\t\tPositionPrototype protoLong = new PositionPrototype(this.Bars.Symbol, PositionLongShort.Long, protoPlacement, TP, SL, SLactivation);\r\n\t\t\tPositionPrototype protoShort = new PositionPrototype(this.Bars.Symbol, PositionLongShort.Short, -protoPlacement, TP, SL, SLactivation);\r\n\t\t\t//PositionPrototype protoFixed = new PositionPrototype(this.Bars.Symbol, PositionLongShort.Long, 158000, +150.0, -50.0, -40.0);\r\n\r\n\t\t\t//PositionPrototype proto = barNewStaticArrived.Close < 158000 ? protoLong : protoShort;\r\n\t\t\tPositionPrototype proto = protoLong;\r\n\t\t\tbase.Executor.PositionPrototypeActivator.PlaceOnce(proto);\r\n\t\t}\r\n\t\tpublic override void OnAlertFilledCallback(Alert alertFilled) {\r\n\t\t\tif (alertFilled.IsExitAlert) return;\r\n\t\t\tPosition position = alertFilled.PositionAffected;\r\n\t\t}\r\n\t\tpublic override void OnAlertKilledCallback(Alert alertKilled) {\r\n\t\t\t//Debugger.Break();\r\n\t\t}\r\n\t\tpublic override void OnAlertNotSubmittedCallback(Alert alertNotSubmitted, int barNotSubmittedRelno) {\r\n\t\t\tDebugger.Break();\r\n\t\t}\r\n\t\tpublic override void OnPositionOpenedPrototypeSlTpPlacedCallback(Position positionOpenedProto) {\r\n\t\t\tPositionPrototype proto = positionOpenedProto.Prototype;\r\n\t\t\tif (proto == null) return;\r\n\r\n\t\t\tdouble currentStopLossNegativeOffset = proto.StopLossNegativeOffset;\r\n\t\t\tdouble newStopLossNegativeOffset = currentStopLossNegativeOffset - 20;\r\n\t\t\t//string msg = base.Executor.PositionPrototypeActivator.ReasonWhyNewStopLossOffsetDoesntMakeSense(positionOpenedProto, newStopLossNegativeOffset);\r\n\t\t\t//if (String.IsNullOrEmpty(msg)) {\r\n\t\t\t\tbase.Executor.PositionPrototypeActivator.StopLossNewNegativeOffsetUpdateActivate(positionOpenedProto, newStopLossNegativeOffset);\r\n\t\t\t//} else {\r\n\t\t\t//\tbase.Executor.PopupException(new Exception(\"WONT_UPDATE_STOPLOSS: \" + msg));\r\n\t\t\t//}\r\n\r\n\t\t\tdouble newTakeProfitPositiveOffset = proto.TakeProfitPositiveOffset + 50;\r\n\t\t\t//msg = base.Executor.PositionPrototypeActivator.ReasonWhyNewTakeProfitOffsetDoesntMakeSense(positionOpenedProto, newTakeProfitPositiveOffset);\r\n\t\t\t//if (String.IsNullOrEmpty(msg)) {\r\n\t\t\t\tbase.Executor.PositionPrototypeActivator.TakeProfitNewPositiveOffsetUpdateActivate(positionOpenedProto, newTakeProfitPositiveOffset);\r\n\t\t\t//} else {\r\n\t\t\t//\tbase.Executor.PopupException(new Exception(\"WONT_UPDATE_TAKEPROFIT: \" + msg));\r\n\t\t\t//}\r\n\t\t}\r\n\t\tpublic override void OnPositionClosedCallback(Position positionClosed) {\r\n\t\t\t//Debugger.Break();\r\n\t\t}\r\n\t\tpublic override void OnPositionOpenedCallback(Position positionOpened) {\r\n\t\t\t// NEVER_INVOKED_SINCE_I_USE_POSITION_PROTOTYPES_ONLY no direct BuyAt* or SellAt*\r\n\t\t\tDebugger.Break();\r\n\t\t}\r\n\t}\r\n}",
  "DotNetReferences": "",
  "DllPathIfNoSourceCode": null,
  "ExceptionsLimitToAbortBacktest": 10,
  "StoredInJsonAbspath": "C:\\SquareOne\\Sq1.Gui\\bin\\Debug\\..\\..\\..\\Data-debug\\Strategies\\my\\StopLimitTest.json",
  "ScriptContextCurrentName": "Default",
  "ScriptContextsByName": {
    "$type": "System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[Sq1.Core.StrategyBase.ContextScript, Sq1.Core]], mscorlib",
    "Default": {
      "$type": "Sq1.Core.StrategyBase.ContextScript, Sq1.Core",
      "PositionSize": {
        "$type": "Sq1.Core.Execution.PositionSize, Sq1.Core",
        "Mode": 1,
        "DollarsConstantEachTrade": 0.0,
        "SharesConstantEachTrade": 1.0
      },
      "IsCurrent": true,
      "ChartAutoSubmitting": false,
      "ReporterShortNamesUserInvokedJSONcheck": [
        "Performance",
        "Positions"
      ],
      "BacktestOnRestart": true,
      "BacktestOnSelectorsChange": true,
      "ReportersSnapshots": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib",
        "Performance": null,
        "Positions": {
          "$type": "Sq1.Reporters.PositionsDataSnapshot, Sq1.Reporters",
          "ShowEntriesExits": true,
          "ShowPercentage": true,
          "ShowBarsHeld": true,
          "ShowMaeMfe": true,
          "ShowSignals": true,
          "ShowCommission": true,
          "Colorify": true
        }
      },
      "ApplyCommission": false,
      "EnableSlippage": false,
      "LimitOrderSlippage": false,
      "RoundEquityLots": false,
      "RoundEquityLotsToUpperHundred": false,
      "NoDecimalRoundingForLimitStopPrice": false,
      "SlippageUnits": 1.0,
      "SlippageTicks": 1,
      "PriceLevelSizeForBonds": 0,
      "Name": "Default",
      "Symbol": "RIM3",
      "DataSourceName": "MOCK",
      "ScaleInterval": {
        "$type": "Sq1.Core.DataTypes.BarScaleInterval, Sq1.Core",
        "Scale": 3,
        "Interval": 5,
        "IsIntraday": true,
        "TimeSpanInSeconds": 300
      },
      "DataRange": {
        "$type": "Sq1.Core.DataTypes.BarDataRange, Sq1.Core",
        "Range": 1,
        "StartDate": "2009-08-07T00:00:00-04:00",
        "EndDate": "2014-08-07T00:00:00-04:00",
        "RecentBars": 1200,
        "RecentTimeunits": 10
      },
      "ChartStreaming": false,
      "ShowRangeBar": false,
      "ParameterValuesById": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.Int32, mscorlib],[System.Double, mscorlib]], mscorlib",
        "1": 20.0
      }
    }
  },
  "HasChartOnly": false,
  "ScriptParametersJSONcheck": {
    "$type": "System.Collections.Generic.Dictionary`2[[System.Int32, mscorlib],[Sq1.Core.StrategyBase.ScriptParameter, Sq1.Core]], mscorlib"
  }
}